{"version":3,"sources":["fonts/exil.ttf","components/jumbotron.tsx","components/navbar.tsx","components/selection.tsx","Util.tsx","components/educatorform.tsx","components/studentform.tsx","pages/pages.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Jumbotron","useEffect","canvas","document","getElementById","console","log","ctx","getContext","centerX","width","centerY","height","fillStyle","fillRect","beginPath","arc","Math","PI","fill","className","id","style","viewBox","xmlns","d","transform","Navbar","props","link","text","to","SelectionBox","onClicked","onClick","makeRequest","data","apiURL","a","verb","url","requestParams","method","headers","redirect","referrerPolicy","body","JSON","stringify","fetch","response","json","EducatorForm","useState","setDisplayed","completed","setResponse","auth","teacherName","setData","password","name","modifier","setModifier","submitForm","then","responseData","catch","reason","React","useRef","classCode","autoComplete","onSubmit","event","preventDefault","valid","validateSubmit","type","maxLength","placeholder","onAnimationEnd","onChange","target","value","StudentForm","grade","setRedirect","CompleteStudentForm","studentName","projectData","setProjectData","classData","setClassData","class","min","max","Homepage","GetStarted","toRender","display","setDisplay","unlinkedDisplay","setUnlinkedDisplay","selectionVisible","setSelectionVisible","nodeRef","animateForm","CSSTransition","unmountOnExit","in","timeout","classNames","onExited","ref","StudentFormComplete","useParams","App","routes","path","Component","map","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode"],"mappings":"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","file":"static/js/main.11c6404f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/exil.cbdfb905.ttf\";","// @ts-nocheck\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport Button from './button';\r\nimport '../scss/components/jumbotron.scss'\r\n\r\nconst Jumbotron = () => {\r\n\r\n    useEffect(() => {\r\n        const canvas = document.getElementById(\"text-canvas\")\r\n        console.log(canvas)\r\n        \r\n        var ctx = canvas.getContext(\"2d\");\r\n        const centerX = canvas.width / 2;\r\n        const centerY = canvas.height / 2;\r\n        const radius = 50;\r\n\r\n\r\n        ctx.fillStyle = \"white\";\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        ctx.beginPath();\r\n        ctx.arc(centerX, centerY+30, radius, 0, 2 * Math.PI, false);\r\n        ctx.fillStyle = '#b279a7';\r\n        ctx.fill();\r\n        \r\n        ctx.beginPath();\r\n        ctx.arc(centerX-150, centerY-30, radius, 0, 2 * Math.PI, false);\r\n        ctx.fillStyle = '#b279a7';\r\n        ctx.fill();\r\n\r\n    });\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"jumbotron\">\r\n            <div className=\"text-container\">\r\n                <div className=\"text-background\">\r\n                    <canvas id=\"text-canvas\" ></canvas>\r\n                    <h1 className=\"large-text unselectable\">Night At <br/> The Museum</h1>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"morph-blob\" style={{\"display\":\"none\"}}>\r\n                <svg viewBox=\"0 0 200 200\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <path d=\"M45.1,-50.8C54.3,-46,54.6,-27.9,55.3,-11.6C55.9,4.7,56.8,19,51.2,30.4C45.6,41.8,33.5,50.3,18.5,59.3C3.6,68.4,-14.2,78.1,-32,76.5C-49.7,75,-67.5,62.1,-71.3,45.8C-75.1,29.6,-64.9,10,-56.2,-4.9C-47.6,-19.8,-40.6,-29.9,-31.5,-34.7C-22.4,-39.4,-11.2,-38.9,3.4,-42.9C18,-47,35.9,-55.6,45.1,-50.8Z\" transform=\"translate(100 100)\" />\r\n                </svg>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n//                    \r\n\r\nexport default Jumbotron;","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport '../scss/components/navbar.scss'\r\n\r\nconst Navbar = (props:{link:string, text:string}) => {\r\n\r\n    const {link, text} = props;\r\n\r\n    return (\r\n        <nav className=\"navbar\">\r\n            <div className=\"nav-item logo-text\">\r\n                <span className=\"get-started left-side\"><Link to={link}>{text}</Link></span>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport '../scss/components/selection.scss'\r\n\r\nconst SelectionBox = (props:{text:string, onClicked:Function}) => {\r\n\r\n    const {text, onClicked} = props;\r\n\r\n\r\n    return(\r\n        <div className=\"selection-box\" onClick={()=>onClicked()}>\r\n            <h1>{text}</h1>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default SelectionBox;","const DEBUG = true;\r\n\r\nasync function makeRequest(data:object, apiURL:string, verb:string = \"GET\"):Promise<object>{\r\n\r\n    var url = '/api/' + apiURL;\r\n    if(DEBUG){\r\n        url = 'http://localhost:8080/api/' + apiURL\r\n    }\r\n    \r\n\r\n    const requestParams:any = {\r\n        method:verb,\r\n\r\n        headers:{\r\n            'Content-type':'application/json'\r\n        },\r\n        redirect:\"follow\",\r\n        referrerPolicy:\"no-referrer\",\r\n    }\r\n\r\n    if(verb === \"POST\"){\r\n        requestParams.body = JSON.stringify(data)\r\n    }\r\n\r\n    const response = await fetch(url, requestParams);\r\n    return response.json();\r\n}\r\n\r\n\r\n\r\nconst _ = {\r\n    makeRequest\r\n}\r\n\r\nexport default makeRequest;\r\n\r\n/*\r\n        mode:\"no-cors\",\r\n        cache:\"no-cache\",\r\n        credentials:'same-origin',\r\n        */","import React, {useEffect, useState} from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport '../scss/components/createform.scss'\r\nimport '../scss/components/transition.scss'\r\n\r\nimport {ClassForm, ClassFormResponse} from '../interfaces';\r\nimport makeRequest from '../Util';\r\n\r\nconst EducatorForm = () => {\r\n\r\n    const [displayed, setDisplayed] = useState(false);\r\n\r\n    const [response, setResponse] = useState<ClassFormResponse>({\r\n        completed:false\r\n    });\r\n\r\n    const [data, setData] = useState<ClassForm>({\r\n        auth:\"\",\r\n        teacherName:\"\"\r\n    });\r\n\r\n    const [modifier, setModifier] = useState({\r\n        password:\"\",\r\n        name:\"\"\r\n    });\r\n\r\n\r\n    useEffect(()=>{\r\n        setDisplayed(true) //dont fade out\r\n    }, []);\r\n\r\n\r\n    const validateSubmit = (data:ClassForm) => {\r\n        console.log(data);\r\n        makeRequest({auth:data.auth}, 'classes/checkPassword/', 'POST')\r\n        .then((responseData:any) => {\r\n            if(responseData.valid){\r\n                setModifier(modifier=>({...modifier, password:\"correct\"}))\r\n                if(data.teacherName !== \"\"){\r\n                    setModifier(modifier=>({...modifier, name:\"correct\"}))\r\n\r\n                    submitForm(data)\r\n                }else{\r\n                    setModifier(modifier=>({...modifier, name:\"incorrect\"}))\r\n                }\r\n            }else{\r\n                setModifier(modifier=>({...modifier, password:\"incorrect\"}))\r\n            }\r\n        });\r\n    }\r\n\r\n    const submitForm = (data:ClassForm) => {\r\n        makeRequest(data, 'classes/', 'POST')\r\n        .then((responseData:ClassFormResponse) => {\r\n            if(responseData.completed){\r\n                setResponse(responseData);\r\n            }\r\n        }).catch((reason:any) => {\r\n            console.log(reason);\r\n        });\r\n    }\r\n\r\n    const handleSubmit = (event:any) => {\r\n        event.preventDefault();\r\n        console.log(data);\r\n        validateSubmit(data);\r\n\r\n        return;\r\n        /*\r\n\r\n        return false;*/\r\n    }\r\n\r\n    const nodeRef = React.useRef(null);\r\n    \r\n    if(!response.completed){ //get form info\r\n        return (\r\n            <div className=\"form-container\">\r\n                <form className=\"center-form\" autoComplete=\"off\" onSubmit={handleSubmit}>\r\n    \r\n                    <label className=\"form-label\">Create a Class</label>\r\n\r\n                    <input type=\"text\" name=\"code\" maxLength={10}\r\n                    placeholder=\"password\"\r\n                    className={\"form-input__text \" + modifier.password} \r\n                    onAnimationEnd={()=>setModifier(modifier=>({...modifier, password:\"\"}))} \r\n                    onChange={(event)=>setData(data=>({...data, auth:event.target.value}))}/>\r\n    \r\n    \r\n                    <input type=\"text\" name=\"name\" maxLength={10}\r\n                    placeholder=\"name\"\r\n                    className={\"form-input__text \"+ modifier.name}\r\n                    onAnimationEnd={()=>setModifier(modifier=>({...modifier, name:\"\"}))}\r\n                    onChange={(event)=>setData(data=>({...data, teacherName:event.target.value}))}/>\r\n    \r\n    \r\n                    <input type=\"submit\" className=\"form-submit\"/>\r\n    \r\n                </form>\r\n            </div>\r\n        )\r\n    }else if(response.completed){ //Display code\r\n        return (\r\n            <div className=\"info-screen\">\r\n                <h1>You're all set!</h1>\r\n                <h1 className=\"class-code\">{response.classCode}</h1>\r\n                <h1>Share this code with your class</h1>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    /*\r\n\r\n                    <div>\r\n                    <span className=\"form-label\">Name</span>\r\n                    <input type=\"text\" name=\"name\" maxLength={30} placeholder=\"Name\"\r\n                    className={\"form-input__text \" + modifier} \r\n                    onAnimationEnd={()=>setModifier(\"\")} \r\n                    onChange={(event)=>setData(data=>({...data, name:event.target.value}))}/>\r\n                </div\r\n                */\r\n\r\n\r\n    /*\r\n\r\n    <label className=\"form-label\">Password</label>\r\n\r\n    return (\r\n        <CSSTransition nodeRef={nodeRef} unmountOnExit in={displayed} timeout={1000} classNames=\"test-node\">\r\n            <div className=\"form-container\" ref={nodeRef}>\r\n                {getSlide()}\r\n            </div>\r\n        </CSSTransition>\r\n    )*/\r\n    return <></>\r\n}\r\n\r\n\r\n/*\r\nconst Question0 = (props:{data:ClassForm, setData:Function, setSlide:Function}) => {\r\n\r\n    const {data, setData, setSlide} = props;\r\n\r\n    const [modifier, setModifier] = useState(\"\");\r\n    const [displayed, setDisplayed] = useState(true);\r\n\r\n    const hs = (event:any) => {\r\n        event.preventDefault()\r\n        makeRequest({auth:data.auth}, 'classes/checkPassword/', 'POST')\r\n        .then((data:any) => {\r\n            if(data.valid){\r\n                setModifier(\"correct\")\r\n                setSlide(1)\r\n            }else{\r\n                setModifier(\"incorrect\")\r\n            }\r\n        });\r\n        return false;\r\n    }\r\n\r\n    const smallNodeRef = React.useRef(null);\r\n    return (\r\n        <CSSTransition nodeRef={smallNodeRef} unmountOnExit in={displayed} timeout={1000} classNames=\"side-node\">\r\n            <form className=\"center-form\" autoComplete=\"off\" onSubmit={hs} ref={smallNodeRef} >\r\n                <label className=\"form-label\">Password</label>\r\n                <input type=\"text\" name=\"code\" maxLength={10} className={\"form-input__text \" + modifier} onAnimationEnd={()=>setModifier(\"\")} onChange={(event)=>setData({auth:event.target.value})}/>\r\n                <input type=\"submit\" className=\"form-submit\"/>\r\n            </form>\r\n        </CSSTransition>\r\n    )\r\n}\r\n\r\n\r\nconst Question1 = (props:{data:ClassForm, setData:Function, setSlide:Function}) => {\r\n    const [displayed, setDisplayed] = useState(false);\r\n    const {data, setData, setSlide} = props;\r\n\r\n    useEffect(()=>{\r\n        setDisplayed(true) //Animate on mount\r\n    }, []);\r\n    const nodeRef = React.useRef(null);\r\n    const smallNodeRef = React.useRef(null);\r\n    return (\r\n        <CSSTransition nodeRef={smallNodeRef} unmountOnExit in={displayed} timeout={1000} classNames=\"side-node\">\r\n            <form className=\"center-form\" autoComplete=\"off\" ref={smallNodeRef}>\r\n                <label className=\"form-label\">Name</label>\r\n                <input type=\"text\" name=\"code\" maxLength={10} className=\"form-input__text \" onChange={(event)=>setData({name:event.target.value})}/>\r\n                <input type=\"submit\" className=\"form-submit\"/>\r\n            </form>\r\n        </CSSTransition>\r\n    )\r\n}\r\n\r\n*/\r\n\r\n\r\nexport default EducatorForm;","import { truncateSync } from 'fs';\r\nimport React, {useEffect, useState} from 'react';\r\nimport { Redirect } from 'react-router';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport { Class, ClassForm, Project } from '../interfaces';\r\nimport '../scss/components/createform.scss'\r\nimport '../scss/components/transition.scss'\r\nimport makeRequest from '../Util';\r\n\r\nconst StudentForm = () => {\r\n\r\n\r\n    const [data, setData] = useState({\r\n        classCode:\"\",\r\n        name:\"\",\r\n        grade:-1\r\n    })\r\n\r\n    const [classCode, setClassCode] = useState(\"\");\r\n    const [modifier, setModifier] = useState(\"\");\r\n    const [redirect, setRedirect] = useState(false);\r\n\r\n\r\n\r\n    const verifyClassCode = (event:any) => {\r\n        event.preventDefault();\r\n\r\n        makeRequest(data, 'students/checkClassCode', 'POST')\r\n            .then((response:any) => {\r\n                if(response.valid === true){\r\n                    setModifier(\"correct\")\r\n                    setRedirect(true);\r\n                }else{\r\n                    setModifier(\"incorrect\")\r\n                }\r\n            })\r\n\r\n    }\r\n\r\n\r\n    const nodeRef = React.useRef(null);\r\n\r\n\r\n    if(redirect){\r\n        return <Redirect to={`/get-started/classes/${data.classCode}`}/>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"form-container\">\r\n            <form className=\"center-form\" autoComplete=\"off\" onSubmit={verifyClassCode}>\r\n                <label className=\"form-label\">Class Code</label>\r\n                <input type=\"text\" name=\"classCode\" maxLength={5} className={\"form-input__text \" + modifier} \r\n                onAnimationEnd={()=>setModifier(\"\")} \r\n                onChange={(event)=>setData((data)=>({...data, classCode:event.target.value}))}/>\r\n                <input type=\"submit\" className=\"form-submit\"/>\r\n            </form>\r\n        </div>\r\n    )\r\n\r\n\r\n\r\n    /*\r\n    return (\r\n        <div className=\"form-container\">\r\n            <CSSTransition nodeRef={nodeRef} unmountOnExit in={displayed} timeout={1000} classNames=\"test-node\">\r\n                <form className=\"center-form\" autoComplete=\"off\" onSubmit={handleSubmit} ref={nodeRef}>\r\n                    <label className=\"form-label\">Class Code</label>\r\n                    <input type=\"text\" name=\"classCode\" maxLength={5} className={\"form-input__text \" + modifier} onAnimationEnd={()=>setModifier(\"\")} onChange={(event)=>setClassCode(event.target.value)}/>\r\n                    <input type=\"submit\" className=\"form-submit\"/>\r\n                </form>\r\n            </CSSTransition>\r\n        </div>\r\n    )*/\r\n}\r\n\r\n\r\nconst CompleteStudentForm = (props:{classCode:string}) => {\r\n\r\n    const {classCode} = props;\r\n\r\n    const [projectData, setProjectData] = useState<Project>({\r\n        studentName:\"\",\r\n        grade:-1\r\n    })\r\n    const [classData, setClassData] = useState<Class>();\r\n\r\n    const [response, setResponse] = useState({\r\n        completed:false,\r\n    });\r\n \r\n    const [modifier, setModifier] = useState({\r\n        studentName:\"\",\r\n        grade:\"\"\r\n    });\r\n\r\n    const validateClassCode = () => {\r\n        makeRequest({classCode}, 'students/checkClassCode', 'POST')\r\n            .then((response:any) => {\r\n                console.log(response)\r\n                if(response.valid){\r\n                    setClassData({...response.class, valid:true});\r\n                }else{\r\n                    setClassData({valid:false})\r\n                }\r\n            });\r\n    }\r\n    useEffect(() => {\r\n        validateClassCode();\r\n    }, [])\r\n\r\n\r\n    const handleSubmit = (event:any) => {\r\n        event.preventDefault();\r\n\r\n        if(projectData.studentName === \"\"){\r\n            setModifier((modifier) => ({...modifier, studentName:\"incorrect\"}));\r\n            return;\r\n        }\r\n\r\n        if((projectData.grade || -1) < 0){\r\n            setModifier((modifier) => ({...modifier, grade:\"incorrect\"}));\r\n            return;\r\n        }        \r\n\r\n        makeRequest({...projectData, classCode}, 'students', 'POST')\r\n            .then((response:any) => {\r\n                setResponse(response);\r\n            })\r\n\r\n    }\r\n\r\n\r\n    if(classData == null){ // Render errors\r\n        return <></>\r\n    }else if(!classData.valid){\r\n        return <h1>Whoops, you're not supposed to see this </h1>\r\n    }\r\n\r\n    if(response.completed){\r\n        return (\r\n            <div className=\"form-container\">\r\n                <h1>Thanks {projectData.studentName}, Your good to go!</h1>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (    \r\n        <div className=\"form-container\">\r\n            <h1>Class Code: {classData.classCode}</h1>\r\n            <h1>Teacher: {classData.teacherName}</h1>\r\n\r\n            <form className=\"center-form\" autoComplete=\"off\" onSubmit={handleSubmit}>\r\n\r\n                <input type=\"text\" name=\"studentName\" maxLength={30} className={\"form-input__text \" + modifier.studentName}\r\n                placeholder=\"name\"\r\n                onChange={(event)=>setProjectData((projectData)=>({...projectData, studentName:event.target.value}))}\r\n                onAnimationEnd={()=>setModifier((modifier)=>({...modifier, studentName:\"\"}))}\r\n                />\r\n\r\n                <input type=\"number\" min={9} max={12} name=\"grade\" maxLength={1} className={\"form-input__text \" + modifier.grade}\r\n                placeholder=\"grade\"\r\n                onChange={(event)=>setProjectData((projectData)=>({...projectData, grade:+event.target.value}))}\r\n                onAnimationEnd={()=>setModifier((modifier)=>({...modifier, grade:\"\"}))}\r\n                />\r\n\r\n                <input type=\"submit\" className=\"form-submit\"/>\r\n            </form>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport {StudentForm, CompleteStudentForm};","import React, {useState, useEffect} from \"react\";\r\nimport { useParams } from 'react-router-dom'\r\nimport Jumbotron from \"../components/jumbotron\";\r\nimport Navbar from \"../components/navbar\";\r\nimport SelectionBox from \"../components/selection\";\r\n\r\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\r\nimport '../scss/components/transition.scss'\r\nimport EducatorForm from \"../components/educatorform\";\r\nimport {StudentForm, CompleteStudentForm} from \"../components/studentform\";\r\n\r\nconst Homepage = () => {\r\n    return (\r\n        <div className=\"panel-bg\">\r\n            <Navbar link=\"/get-started\" text=\"Get Started\"/>\r\n            <Jumbotron/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst GetStarted = (props:any) => {\r\n\r\n    const [display, setDisplay] = useState(0); //0, 1, 2\r\n    const [unlinkedDisplay, setUnlinkedDisplay] = useState(0);\r\n\r\n    const [selectionVisible, setSelectionVisible] = useState(false);\r\n    const nodeRef = React.useRef(null);\r\n    const animateForm = (d:number) => {\r\n        setSelectionVisible(false)\r\n        setUnlinkedDisplay(d);\r\n    } \r\n\r\n\r\n    useEffect(()=>{\r\n        setSelectionVisible(true); //Load in forms\r\n    }, [])\r\n\r\n\r\n    var toRender;\r\n    if(display === 0){\r\n  \r\n        toRender = (\r\n            <CSSTransition nodeRef={nodeRef} unmountOnExit in={selectionVisible} timeout={1000} classNames=\"test-node\" onExited={()=>setDisplay(unlinkedDisplay)}>\r\n                <div className=\"selection-container\" ref={nodeRef}>\r\n                    <SelectionBox text=\"I am a Student\" onClicked={()=>animateForm(1)}/>\r\n                    <SelectionBox text=\"I am an Educator\"  onClicked={()=>animateForm(2)}/>\r\n                </div>\r\n            </CSSTransition>\r\n        )\r\n    }else if(display === 1){\r\n        toRender = (\r\n            <StudentForm/>\r\n        );\r\n    }else if(display === 2){\r\n        toRender = (\r\n            <EducatorForm/>\r\n        );\r\n    }\r\n\r\n    return(\r\n        <div className=\"panel-bg\">\r\n            <Navbar link=\"/\" text=\"Home\"/>\r\n            <div className=\"jumbotron-center\">\r\n                {toRender}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst StudentFormComplete = (props:any) => {\r\n\r\n    const {classCode} = useParams<any>();\r\n\r\n    return (\r\n        <div className=\"panel-bg\">\r\n            <Navbar link=\"/\" text=\"Home\"/>\r\n            <div className=\"jumbotron-center\">\r\n                <CompleteStudentForm classCode={classCode}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport {Homepage, GetStarted, StudentFormComplete};\r\n\r\n/*\r\n            {/*<CSSTransition nodeRef={nodeRef} unmountOnExit in={test} timeout={1000} classNames=\"test-node\">\r\n                    <div ref={nodeRef}>\r\n                        <h1>Hope</h1>\r\n                    </div>\r\n                </CSSTransition>\r\n    <button onClick={()=>setTest(!test)}>Hide</button>*/\r\n","import React, {useState}from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport {GetStarted, Homepage, StudentFormComplete} from './pages/pages';\nimport './scss/main.scss'\n\nfunction App() {\n\n\n  const pages = [\n    {path:\"/\", name:\"homepage\", Component:Homepage},\n    {path:\"/get-started\", name:\"get-started\", Component:GetStarted},\n    {path:\"/get-started/classes/:classCode\", Component:StudentFormComplete}\n  ]\n\n\n  const routes = pages.map(({path, Component}) => (\n    <Route key={path} exact path={path}>\n      <Component/>\n    </Route>\n  ))\n\n  return (\n\n      <Router>\n        <div className=\"App\">\n          {routes}\n        </div>\n      </Router>\n\n  );\n}\n\nexport default App;\n\n/*\n\n\n        <Switch>\n\n          <Route path=\"/get-started\">\n            <GetStarted/>\n          </Route>\n\n          <Route path=\"/\">\n            <Homepage/>\n          </Route>\n\n        </Switch>\n\n        */","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\n//import ReactDOM from 'react-dom';\nimport { render } from 'react-snapshot';\nimport './index.css';\nimport './fonts/exil.ttf'\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nrender(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}