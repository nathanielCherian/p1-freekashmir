{"version":3,"sources":["fonts/exil.ttf","components/jumbotron.tsx","components/navbar.tsx","components/selection.tsx","components/studentform.tsx","Util.tsx","components/educatorform.tsx","pages/pages.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Jumbotron","useEffect","canvas","document","getElementById","console","log","ctx","getContext","centerX","width","centerY","height","fillStyle","fillRect","beginPath","arc","Math","PI","fill","className","id","style","viewBox","xmlns","d","transform","Navbar","props","link","text","to","SelectionBox","onClicked","onClick","StudentForm","useState","setClassCode","displayed","setDisplayed","modifier","setModifier","nodeRef","React","useRef","CSSTransition","unmountOnExit","in","timeout","classNames","autoComplete","onSubmit","event","preventDefault","ref","type","name","maxLength","onAnimationEnd","onChange","target","value","makeRequest","data","apiURL","a","verb","url","requestParams","method","headers","redirect","referrerPolicy","body","JSON","stringify","fetch","response","json","EducatorForm","code","setCode","auth","then","valid","Homepage","GetStarted","toRender","display","setDisplay","unlinkedDisplay","setUnlinkedDisplay","selectionVisible","setSelectionVisible","animateForm","onExited","App","routes","path","Component","map","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode"],"mappings":"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","file":"static/js/main.f9d5f773.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/exil.cbdfb905.ttf\";","// @ts-nocheck\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport Button from './button';\r\nimport '../scss/components/jumbotron.scss'\r\n\r\nconst Jumbotron = () => {\r\n\r\n    useEffect(() => {\r\n        const canvas = document.getElementById(\"text-canvas\")\r\n        console.log(canvas)\r\n        \r\n        var ctx = canvas.getContext(\"2d\");\r\n        const centerX = canvas.width / 2;\r\n        const centerY = canvas.height / 2;\r\n        const radius = 50;\r\n\r\n\r\n        ctx.fillStyle = \"white\";\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        ctx.beginPath();\r\n        ctx.arc(centerX, centerY+30, radius, 0, 2 * Math.PI, false);\r\n        ctx.fillStyle = '#b279a7';\r\n        ctx.fill();\r\n        \r\n        ctx.beginPath();\r\n        ctx.arc(centerX-150, centerY-30, radius, 0, 2 * Math.PI, false);\r\n        ctx.fillStyle = '#b279a7';\r\n        ctx.fill();\r\n\r\n    });\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"jumbotron\">\r\n            <div className=\"text-container\">\r\n                <div className=\"text-background\">\r\n                    <canvas id=\"text-canvas\" ></canvas>\r\n                    <h1 className=\"large-text unselectable\">Night At <br/> The Museum</h1>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"morph-blob\" style={{\"display\":\"none\"}}>\r\n                <svg viewBox=\"0 0 200 200\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <path d=\"M45.1,-50.8C54.3,-46,54.6,-27.9,55.3,-11.6C55.9,4.7,56.8,19,51.2,30.4C45.6,41.8,33.5,50.3,18.5,59.3C3.6,68.4,-14.2,78.1,-32,76.5C-49.7,75,-67.5,62.1,-71.3,45.8C-75.1,29.6,-64.9,10,-56.2,-4.9C-47.6,-19.8,-40.6,-29.9,-31.5,-34.7C-22.4,-39.4,-11.2,-38.9,3.4,-42.9C18,-47,35.9,-55.6,45.1,-50.8Z\" transform=\"translate(100 100)\" />\r\n                </svg>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n//                    \r\n\r\nexport default Jumbotron;","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport '../scss/components/navbar.scss'\r\n\r\nconst Navbar = (props:{link:string, text:string}) => {\r\n\r\n    const {link, text} = props;\r\n\r\n    return (\r\n        <nav className=\"navbar\">\r\n            <div className=\"nav-item logo-text\">\r\n                <span className=\"get-started left-side\"><Link to={link}>{text}</Link></span>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport '../scss/components/selection.scss'\r\n\r\nconst SelectionBox = (props:{text:string, onClicked:Function}) => {\r\n\r\n    const {text, onClicked} = props;\r\n\r\n\r\n    return(\r\n        <div className=\"selection-box\" onClick={()=>onClicked()}>\r\n            <h1>{text}</h1>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default SelectionBox;","import React, {useEffect, useState} from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport '../scss/components/createform.scss'\r\nimport '../scss/components/transition.scss'\r\n\r\nconst StudentForm = () => {\r\n\r\n\r\n    const [classCode, setClassCode] = useState(\"\");\r\n    const [displayed, setDisplayed] = useState(false);\r\n    const [modifier, setModifier] = useState(\"\");\r\n\r\n\r\n    useEffect(()=>{\r\n        setDisplayed(true)\r\n    }, []);\r\n\r\n\r\n    const checkClassCode = (code:string) => {\r\n        //verify code here\r\n        return false;\r\n    }\r\n\r\n    const handleSubmit = (event:any) => {\r\n        //post to spring\r\n        event.preventDefault();\r\n\r\n        if(checkClassCode(classCode)){\r\n            setDisplayed(false)\r\n        }else{\r\n            setModifier(\"incorrect\")\r\n        }\r\n    }\r\n\r\n\r\n    const nodeRef = React.useRef(null);\r\n\r\n    return (\r\n        <div className=\"form-container\">\r\n            <CSSTransition nodeRef={nodeRef} unmountOnExit in={displayed} timeout={1000} classNames=\"test-node\">\r\n                <form className=\"center-form\" autoComplete=\"off\" onSubmit={handleSubmit} ref={nodeRef}>\r\n                    <label className=\"form-label\">Class Code</label>\r\n                    <input type=\"text\" name=\"classCode\" maxLength={5} className={\"form-input__text \" + modifier} onAnimationEnd={()=>setModifier(\"\")} onChange={(event)=>setClassCode(event.target.value)}/>\r\n                    <input type=\"submit\" className=\"form-submit\"/>\r\n                </form>\r\n            </CSSTransition>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StudentForm;","const DEBUG = true;\r\n\r\nasync function makeRequest(data:object, apiURL:string, verb:string = \"GET\"):Promise<object>{\r\n\r\n    var url = '/api/' + apiURL;\r\n    if(DEBUG){\r\n        url = 'http://localhost:8080/api/' + apiURL\r\n    }\r\n    \r\n\r\n    const requestParams:any = {\r\n        method:verb,\r\n\r\n        headers:{\r\n            'Content-type':'application/json'\r\n        },\r\n        redirect:\"follow\",\r\n        referrerPolicy:\"no-referrer\",\r\n    }\r\n\r\n    if(verb === \"POST\"){\r\n        requestParams.body = JSON.stringify(data)\r\n    }\r\n\r\n    const response = await fetch(url, requestParams);\r\n    return response.json();\r\n}\r\n\r\n\r\n\r\nconst _ = {\r\n    makeRequest\r\n}\r\n\r\nexport default makeRequest;\r\n\r\n/*\r\n        mode:\"no-cors\",\r\n        cache:\"no-cache\",\r\n        credentials:'same-origin',\r\n        */","import React, {useEffect, useState} from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport '../scss/components/createform.scss'\r\nimport '../scss/components/transition.scss'\r\n\r\nimport {checkPassword} from '../interfaces';\r\nimport makeRequest from '../Util';\r\n\r\nconst EducatorForm = () => {\r\n\r\n    const [code, setCode] = useState(\"\");\r\n    const [displayed, setDisplayed] = useState(false);\r\n    const [modifier, setModifier] = useState(\"\");\r\n\r\n\r\n    useEffect(()=>{\r\n        setDisplayed(true)\r\n    }, []);\r\n\r\n\r\n    const handleSubmit = (event:any) => {\r\n        event.preventDefault()\r\n        makeRequest({auth:code}, 'classes/checkPassword/', 'POST')\r\n        .then((data:any) => {\r\n            if(data.valid){\r\n                setModifier(\"correct\")\r\n                setDisplayed(false)\r\n            }else{\r\n                setModifier(\"incorrect\")\r\n            }\r\n        });\r\n        return false;\r\n    }\r\n\r\n\r\n\r\n    const nodeRef = React.useRef(null);\r\n\r\n    return (\r\n        <div className=\"form-container\">\r\n            <CSSTransition nodeRef={nodeRef} unmountOnExit in={displayed} timeout={1000} classNames=\"test-node\">\r\n                <form className=\"center-form\" autoComplete=\"off\" onSubmit={handleSubmit} ref={nodeRef}>\r\n                    <label className=\"form-label\">Password</label>\r\n                    <input type=\"text\" name=\"code\" maxLength={10} className={\"form-input__text \" + modifier} onAnimationEnd={()=>setModifier(\"\")} onChange={(event)=>setCode(event.target.value)}/>\r\n                    <input type=\"submit\" className=\"form-submit\"/>\r\n                </form>\r\n            </CSSTransition>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EducatorForm;","import React, {useState, useEffect} from \"react\";\r\nimport Jumbotron from \"../components/jumbotron\";\r\nimport Navbar from \"../components/navbar\";\r\nimport SelectionBox from \"../components/selection\";\r\nimport StudentForm from \"../components/studentform\";\r\n\r\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\r\nimport '../scss/components/transition.scss'\r\nimport EducatorForm from \"../components/educatorform\";\r\n\r\nconst Homepage = () => {\r\n    return (\r\n        <div className=\"panel-bg\">\r\n            <Navbar link=\"/get-started\" text=\"Get Started\"/>\r\n            <Jumbotron/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst GetStarted = (props:any) => {\r\n\r\n    const [display, setDisplay] = useState(0); //0, 1, 2\r\n    const [unlinkedDisplay, setUnlinkedDisplay] = useState(0);\r\n\r\n    const [selectionVisible, setSelectionVisible] = useState(false);\r\n    const nodeRef = React.useRef(null);\r\n    const animateForm = (d:number) => {\r\n        setSelectionVisible(false)\r\n        setUnlinkedDisplay(d);\r\n    } \r\n\r\n\r\n    useEffect(()=>{\r\n        setSelectionVisible(true); //Load in forms\r\n    }, [])\r\n\r\n\r\n    var toRender;\r\n    if(display === 0){\r\n  \r\n        toRender = (\r\n            <CSSTransition nodeRef={nodeRef} unmountOnExit in={selectionVisible} timeout={1000} classNames=\"test-node\" onExited={()=>setDisplay(unlinkedDisplay)}>\r\n                <div className=\"selection-container\" ref={nodeRef}>\r\n                    <SelectionBox text=\"I am a Student\" onClicked={()=>animateForm(1)}/>\r\n                    <SelectionBox text=\"I am an Educator\"  onClicked={()=>animateForm(2)}/>\r\n                </div>\r\n            </CSSTransition>\r\n        )\r\n    }else if(display === 1){\r\n        toRender = (\r\n            <StudentForm/>\r\n        );\r\n    }else if(display === 2){\r\n        toRender = (\r\n            <EducatorForm/>\r\n        );\r\n    }\r\n\r\n    return(\r\n        <div className=\"panel-bg\">\r\n            <Navbar link=\"/\" text=\"Home\"/>\r\n            <div className=\"jumbotron-center\">\r\n                {toRender}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {Homepage, GetStarted};\r\n\r\n/*\r\n            {/*<CSSTransition nodeRef={nodeRef} unmountOnExit in={test} timeout={1000} classNames=\"test-node\">\r\n                    <div ref={nodeRef}>\r\n                        <h1>Hope</h1>\r\n                    </div>\r\n                </CSSTransition>\r\n    <button onClick={()=>setTest(!test)}>Hide</button>*/\r\n","import React, {useState}from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport {GetStarted, Homepage} from './pages/pages';\nimport './scss/main.scss'\n\nfunction App() {\n\n\n  const pages = [\n    {path:\"/\", name:\"homepage\", Component:Homepage},\n    {path:\"/get-started\", name:\"get-started\", Component:GetStarted},\n  ]\n\n\n  const routes = pages.map(({path, Component}) => (\n    <Route key={path} exact path={path}>\n      <Component/>\n    </Route>\n  ))\n\n  return (\n\n      <Router>\n        <div className=\"App\">\n          {routes}\n        </div>\n      </Router>\n\n  );\n}\n\nexport default App;\n\n/*\n\n\n        <Switch>\n\n          <Route path=\"/get-started\">\n            <GetStarted/>\n          </Route>\n\n          <Route path=\"/\">\n            <Homepage/>\n          </Route>\n\n        </Switch>\n\n        */","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\n//import ReactDOM from 'react-dom';\nimport { render } from 'react-snapshot';\nimport './index.css';\nimport './fonts/exil.ttf'\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nrender(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}